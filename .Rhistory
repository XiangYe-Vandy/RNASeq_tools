markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
step3_lympoid_ana()
DimPlot(rcc_lym)
knitr::opts_chunk$set(echo = TRUE)
step1 <- function(){
require(Seurat)
require(dplyr)
require(readr)
require(clusterProfiler)
require(msigdbr)
require(tibble)
}
step1()
step2_recluster_immunecells <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
UMAPPlot(rcc, group.by = "mannual_celltype")
rcc_immune <- subset(rcc, mannual_celltype %in% c("myeloid_cells", "lymphoid_cells"))
rcc_immune <- ScaleData(rcc_immune, verbose = FALSE)
rcc_immune <- RunPCA(rcc_immune, npcs = 50, verbose = FALSE)
#rcc_immune <- JackStraw(rcc_immune, num.replicate = 100)
#rcc_immune <- ScoreJackStraw(rcc_immune, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_immune, dims = 1:20)
#ElbowPlot(rcc_immune)
rcc_immune <- RunUMAP(rcc_immune, reduction = "pca", dims = 1:30, n.neighbors = 30)
#rcc_immune <- RunTSNE(rcc_immune, dims = 1:30)
#saveRDS(rcc_immune, file = "rcc_immunecells_only.rds")
rcc_immune <- FindNeighbors(rcc_immune, dims = 1:30)
rcc_immune <- FindClusters(rcc_immune, resolution = 0.5)
saveRDS(rcc_immune, file = "rcc_immunecells_only.rds")
}
step3_lympoid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_lym <- subset(rcc, mannual_celltype %in% c("lymphoid_cells"))
rcc_lym<- ScaleData(rcc_lym, verbose = FALSE)
rcc_lym <- RunPCA(rcc_lym, npcs = 50, verbose = FALSE)
rcc_lym <- JackStraw(rcc_lym, num.replicate = 100)
rcc_lym <- ScoreJackStraw(rcc_lym, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_lym, dims = 1:20)
#ElbowPlot(rcc_lym)
rcc_lym <- RunUMAP(rcc_lym, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_lym <- FindNeighbors(rcc_lym, dims = 1:30)
rcc_lym <- FindClusters(rcc_lym, resolution = 0.5)
markers <- FindAllMarkers(rcc_lym, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_lymphoid.csv")
return(rcc_lym)
saveRDS(rcc_lym, file = "rcc_lymphoid_only.rds")
}
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
DimPlot(rcc_myeloid)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
step3_lympoid_ana()
rcc_lym <- step3_lympoid_ana()
DimPlot(rcc_lym)
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
DimPlot(rcc_myeloid)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
return(rcc_myeloid)
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
rcc_myeloid <- step4_myeloid_ana()
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
return(rcc_myeloid)
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
rcc_myeloid <- step4_myeloid_ana()
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
return(rcc_myeloid)
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
rcc_myeloid <- step4_myeloid_ana()
?plot
plot(x = 1:10000, y = 1:10000)
plot(x = 1:10000, y = 1:10000, color = "red")
plot(x = 1:10000, y = 1:10000, col = "red")
barplot(height = c(467, 30))
barplot(height = c(467, 30), ylim = c(0, 600))
barplot(height = c(467, 30), ylim = c(0, 600), width = 3)
barplot(height = c(467, 30), ylim = c(0, 600), width = 5)
dev.off()
barplot(height = c(467, 30), ylim = c(0, 600), width = 5)
dev.off()
barplot(height = c(467, 30), ylim = c(0, 600), width = 15)
library(tidyverse)
barplot(height = c(96, 28), ylim = c(0, 600), width = 15)
barplot(height = c(96, 28), ylim = c(0, 120), width = 15)
setwd("~/Dropbox/RNAseqAna")
require(dplyr)
require(readr)
require(edgeR)
require(clusterProfiler)
require(fgsea)
require(msigdbr)
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
require(org.Hs.eg.db)
require(Organism.dplyr)
require(ggfortify) # for PCA plot
require(cowplot)
require(ggrepel)
require(devtools)
load_all()
metaData <- data.frame(sampleID = c(paste0(8004, sep = '_', 1:16)),
Treatment = c("WT_ui_input", "WT_ui_input", "WT_in_input", "WT_in_input", "KO_ui_input",
"KO_ui_input", "KO_in_input", "KO_in_input", "WT_ui_IP", "WT_ui_IP", "WT_in_IP",
"WT_in_IP", "KO_ui_IP", "KO_ui_IP", "KO_in_IP", "KO_in_IP"),
SampleName = c("WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"))
step1_get_counts_output <- step1_get_counts(featurecount_file = "featureCounts_GRCh38_R40_cts.txt",
type = "command_line",
col_names = c("Geneid", "Chr", "Start", "End", "Strand", "Length",
"WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"),
counts_col = c("WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"))
step1_get_counts_output <- step1_get_counts(featurecount_file = "counts/featureCounts_GRCh38_R40_cts.txt",
type = "command_line",
col_names = c("Geneid", "Chr", "Start", "End", "Strand", "Length",
"WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"),
counts_col = c("WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"))
step1_get_counts_output <- step1_get_counts(featurecount_file = "counts/featureCounts_GRCh38_R40_ctx.txt",
type = "command_line",
col_names = c("Geneid", "Chr", "Start", "End", "Strand", "Length",
"WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"),
counts_col = c("WT_ui_inputA", "WT_ui_inputB", "WT_in_inputA", "WT_in_inputB", "KO_ui_inputA",
"KO_ui_inputB", "KO_in_inputA", "KO_in_inputB", "WT_ui_IPA", "WT_ui_IPB", "WT_in_IPA",
"WT_in_IPB", "KO_ui_IPA", "KO_ui_IPB", "KO_in_IPA", "KO_in_IPB"))
# combine two guide combinations --------------------
group <- factor(metaData[, "Treatment"])
design <- model.matrix(~0+group)
# combine two guide combinations --------------------
group <- factor(metaData[, "Treatment"])
design <- model.matrix(~0+group)
con1 <- makeContrasts(groupWT_in_input - groupWT_ui_input, levels = design)
con2 <- makeContrasts(groupKO_in_input - groupKO_ui_input, levels = design)
con3 <- makeContrasts(groupKO_ui_input - groupWT_ui_input, levels = design)
con4 <- makeContrasts(groupKO_in_input - groupWT_in_input, levels = design)
# need to be generalized
con <- list(con1, con2, con3, con4)
step2_edgeR_analysis_output <- step2_edgeR_analysis(counts = step1_get_counts_output, meta = metaData,
sample_column = "sampleID",
groups = "Treatment_agg",
edgeR_file = "BCBL1_LANA_KD_edgeR.rds",
cpm_file = "BCBL1_LANA_KD_edgeR_cpm.csv",
contrast_list = con,
logFC = 1.0, padj = 0.01)
step2_edgeR_analysis_output <- step2_edgeR_analysis(counts = step1_get_counts_output, meta = metaData,
sample_column = "sampleID",
groups = "Treatment",
edgeR_file = "A549_VACV_edgeR.rds",
cpm_file = "A549_VACV_cpm.csv",
contrast_list = con,
logFC = 1.0, padj = 0.01)
step1_get_counts_output
step3_prep_annotation_output <- step3_prep_annotation(sp = "human",
IdList = rownames(step2_edgeR_analysis_output[[1]]$table),
info_types = c("entrez", "symbol", "ensembl"),
IdType = "ensembl")
step4_annotate_output_LANAsg_KD <- step4_annotate(qlf = step2_edgeR_analysis_output[[1]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_WT_infect_vs_uninfect")
library(tibble)
step4_annotate_output_LANAsg_KD <- step4_annotate(qlf = step2_edgeR_analysis_output[[1]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_WT_infect_vs_uninfect")
step4_annotate_output_LANAsg_KD <- step4_annotate(qlf = step2_edgeR_analysis_output[[2]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_KO_infect_vs_uninfect")
step4_annotate_output_LANAsg_KD <- step4_annotate(qlf = step2_edgeR_analysis_output[[3]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_uninfect_KO_vs_WT")
step4_annotate_output_LANAsg_KD <- step4_annotate(qlf = step2_edgeR_analysis_output[[1]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_infect_KO_vs_WT")
step4_annotate_output_WT_in_ui <- step4_annotate(qlf = step2_edgeR_analysis_output[[1]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_WT_infect_vs_uninfect")
step4_annotate_output_KO_in_ui <- step4_annotate(qlf = step2_edgeR_analysis_output[[2]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_KO_infect_vs_uninfect")
step4_annotate_output_ui_KO_WT <- step4_annotate(qlf = step2_edgeR_analysis_output[[3]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_uninfect_KO_vs_WT")
step4_annotate_output_in_KO_WT <- step4_annotate(qlf = step2_edgeR_analysis_output[[1]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_infect_KO_vs_WT")
step4_annotate_output_WT_in_ui%>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
con1 <- makeContrasts(groupWT_in_input - groupWT_ui_input, levels = design)
con2 <- makeContrasts(groupKO_in_input - groupKO_ui_input, levels = design)
con3 <- makeContrasts(groupKO_ui_input - groupWT_ui_input, levels = design)
con4 <- makeContrasts(groupKO_in_input - groupWT_in_input, levels = design)
con5 <- makeContrasts(groupWT_ui_IP - groupWT_ui_input, levels = design)
con6 <- makeContrasts(groupWT_in_IP - groupWT_in_input, levels = design)
con7 <- makeContrasts(groupKO_ui_IP - groupKO_ui_input, levels = design)
con8 <- makeContrasts(groupKO_in_IP - groupKO_in_input, levels = design)
con9 <- makeContrasts(groupKO_ui_IP - groupWT_ui_IP, levels = design)
con10 <- makeContrasts(groupKO_in_IP - groupWT_in_IP, levels = design)
con11 <- makeContrasts(groupWT_in_IP - groupWT_ui_IP, levels = design)
con12 <- makeContrasts(groupKO_in_IP - groupKO_ui_IP, levels = design)
# need to be generalized
con <- list(con1, con2, con3, con4, con5, con6, con7, con8, con9, con10, con11, con12)
step2_edgeR_analysis_output <- step2_edgeR_analysis(counts = step1_get_counts_output, meta = metaData,
sample_column = "sampleID",
groups = "Treatment",
edgeR_file = "A549_VACV_edgeR.rds",
cpm_file = "A549_VACV_cpm.csv",
contrast_list = con,
logFC = 1.0, padj = 0.01)
step3_prep_annotation_output <- step3_prep_annotation(sp = "human",
IdList = rownames(step2_edgeR_analysis_output[[1]]$table),
info_types = c("entrez", "symbol", "ensembl"),
IdType = "ensembl")
step4_annotate_output_input_WT_in_ui <- step4_annotate(qlf = step2_edgeR_analysis_output[[1]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_input_WT_infect_vs_uninfect")
step4_annotate_output_input_KO_in_ui <- step4_annotate(qlf = step2_edgeR_analysis_output[[2]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_input_KO_infect_vs_uninfect")
step4_annotate_output_input_ui_KO_WT <- step4_annotate(qlf = step2_edgeR_analysis_output[[3]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_input_uninfect_KO_vs_WT")
step4_annotate_output_input_in_KO_WT <- step4_annotate(qlf = step2_edgeR_analysis_output[[4]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_input_infect_KO_vs_WT")
step4_annotate_output_WT_uni_IP_vs_input <- step4_annotate(qlf = step2_edgeR_analysis_output[[5]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_WT_uni_IP_vs_input")
step4_annotate_output_WT_inf_IP_vs_input <- step4_annotate(qlf = step2_edgeR_analysis_output[[6]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_WT_inf_IP_vs_input")
step4_annotate_output_KO_uni_IP_vs_input <- step4_annotate(qlf = step2_edgeR_analysis_output[[7]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_KO_uni_IP_vs_input")
step4_annotate_output_KO_inf_IP_vs_input <- step4_annotate(qlf = step2_edgeR_analysis_output[[8]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_KO_inf_IP_vs_input")
step4_annotate_output_IP_uni_KO_vs_WT <- step4_annotate(qlf = step2_edgeR_analysis_output[[9]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_IP_uni_KO_vs_WT")
step4_annotate_output_IP_inf_KO_WT <- step4_annotate(qlf = step2_edgeR_analysis_output[[10]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_IP_inf_KO_vs_WT")
step4_annotate_output_IP_WT_inf_vs_uni <- step4_annotate(qlf = step2_edgeR_analysis_output[[11]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_IP_WT_inf_vs_uni")
step4_annotate_output_IP_KO_inf_vs_uni <- step4_annotate(qlf = step2_edgeR_analysis_output[[12]],
annotation = step3_prep_annotation_output,
Id_col = "ensembl",
file_name = "A549_VACV_IP_KO_inf_vs_uni")
step4_annotate_output_IP_inf_KO_WT%>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_IP_WT_inf_vs_uni%>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_IP_KO_inf_vs_uni%>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
WT_inf_vs_uni
step4_annotate_output_IP_WT_inf_vs_uni%>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_IP_uni_KO_vs_WT%>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_IP_inf_KO_WT %>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_IP_uni_KO_vs_WT %>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_input_in_KO_WT %>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
step4_annotate_output_input_ui_KO_WT %>%
mutate(significance = factor(c(ifelse((abs(logFC) > 1 & padj < 0.05), "Yes", "No")), levels = c("Yes", "No"))) %>%
ggplot(aes(x = logFC, y = -log10(padj))) +
geom_point(aes(color = significance), size = 0.2) +
scale_color_manual(name = "significant", values = c("red", "black")) +
theme_classic() #+
uni_WT_KO <- data.frame(uni_WT_IP_enrich_fold = step4_annotate_output_WT_uni_IP_vs_input,
uni_KO_IP_enrich_fold = step4_annotate_output_KO_uni_IP_vs_input)
uni_WT_KO <- data.frame(uni_WT_IP_enrich_fold = step4_annotate_output_WT_uni_IP_vs_input,
uni_KO_IP_enrich_fold = step4_annotate_output_KO_uni_IP_vs_input)
uni_WT_KO <- data.frame(uni_WT_IP_enrich_fold = step4_annotate_output_WT_uni_IP_vs_input$logFC,
uni_KO_IP_enrich_fold = step4_annotate_output_KO_uni_IP_vs_input$logFC)
uni_WT_KO %>% ggplot(aes(x = uni_WT_IP_enrich_fold, y = uni_KO_IP_enrich_fold))
uni_WT_KO %>% ggplot(aes(x = uni_WT_IP_enrich_fold, y = uni_KO_IP_enrich_fold)) + geom_point()
inf_WT_KO <- data.frame(inf_WT_IP_enrich_fold = step4_annotate_output_WT_inf_IP_vs_input$logFC,
inf_KO_IP_enrich_fold = step4_annotate_output_KO_inf_IP_vs_input$logFC)
inf_WT_KO %>% ggplot(aes(x = inf_WT_IP_enrich_fold, y = inf_KO_IP_enrich_fold)) + geom_point()
WT_inf_uni <- data.frame(WT_uni_IP_enrich_fold = step4_annotate_output_WT_uni_IP_vs_input$logFC,
WT_inf_IP_enrich_fold = step4_annotate_output_WT_inf_IP_vs_input$logFC)
WT_inf_uni %>% ggplot(aes(x = uni_WT_IP_enrich_fold, y = uni_KO_IP_enrich_fold)) + geom_point()
WT_inf_uni %>% ggplot(aes(x = WT_uni_IP_enrich_fold, y = WT_inf_IP_enrich_fold)) + geom_point()
uni_WT_KO %>% ggplot(aes(x = uni_WT_IP_enrich_fold, y = uni_KO_IP_enrich_fold)) + geom_point() +
xlim(-15, 15)+ ylim(-15, 15)
inf_WT_KO <- data.frame(inf_WT_IP_enrich_fold = step4_annotate_output_WT_inf_IP_vs_input$logFC,
inf_KO_IP_enrich_fold = step4_annotate_output_KO_inf_IP_vs_input$logFC)
inf_WT_KO %>% ggplot(aes(x = inf_WT_IP_enrich_fold, y = inf_KO_IP_enrich_fold)) + geom_point()+
xlim(-15, 15)+ ylim(-15, 15)
uni_WT_KO %>% ggplot(aes(x = uni_WT_IP_enrich_fold, y = uni_KO_IP_enrich_fold)) + geom_point() +
xlim(-15, 15)+ ylim(-15, 15)
WT_inf_uni <- data.frame(WT_uni_IP_enrich_fold = step4_annotate_output_WT_uni_IP_vs_input$logFC,
WT_inf_IP_enrich_fold = step4_annotate_output_WT_inf_IP_vs_input$logFC)
WT_inf_uni %>% ggplot(aes(x = WT_uni_IP_enrich_fold, y = WT_inf_IP_enrich_fold)) + geom_point()+
xlim(-15, 15)+ ylim(-15, 15)
