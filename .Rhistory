common_genes
Lytic_LANA_gain <- Lytic_latent_LANA[Lytic_latent_LANA$Fold > 0, ]
Lytic_LANA_lost <- Lytic_latent_LANA[Lytic_latent_LANA$Fold < 0, ]
Lytic_LANA_gain <- Lytic_latent_LANA[Lytic_latent_LANA$Fold > 0, ]
Lytic_LANA_lost <- Lytic_latent_LANA[Lytic_latent_LANA$Fold < 0, ]
Lytic_LANA_gain_genes <- Lytic_latent_DE[Lytic_latent_DE$symbol %in% Lytic_LANA_gain$symbol,]
Lytic_LANA_lost_genes <- Lytic_latent_DE[Lytic_latent_DE$symbol %in% Lytic_LANA_lost$symbol,]
Lytic_LANA_gain_genes
Lytic_LANA_lost_genes
mean(Lytic_LANA_gain_genes$logFC)
mean(Lytic_LANA_lost_genes$logFC)
mean(Lytic_LANA_gain_genes$logCPM)
mean(Lytic_LANA_lost_genes$logCPM)
2^mean(Lytic_LANA_gain_genes$logFC)
2^mean(Lytic_LANA_lost_genes$logFC)
?inner_join
Lytic_latent_DE_LANA_bound <- inner_join(Lytic_latent_DE, Lytic_latent_LANA, by = "symbol")
Lytic_latent_DE_LANA_bound
common_genes
Lytic_latent_DE_LANA_bound
Lytic_latent_DE_LANA_bound$distanceToTSS
Lytic_latent_DE_LANA_bound_2kb <- Lytic_latent_DE_LANA_bound[abs(Lytic_latent_DE_LANA_bound$distanceToTSS) < 2000,]
Lytic_latent_DE_LANA_bound_2kb
Lytic_latent_DE_LANA_bound_2kb %>% mutate(LANA_bound = ifelse(logFC > 0, "increase", "decrease")) %>%
group_by(LANA_bound) %>% summarise(mean(logFC))
Lytic_latent_DE_LANA_bound_distal <- Lytic_latent_DE_LANA_bound[abs(Lytic_latent_DE_LANA_bound$distanceToTSS) > 2000,]
Lytic_latent_DE_LANA_bound_distal %>% mutate(LANA_bound = ifelse(logFC > 0, "increase", "decrease")) %>%
group_by(LANA_bound) %>% summarise(mean(logFC))
Lytic_latent_DE_LANA_bound_distal %>% mutate(LANA_bound = ifelse(logFC > 0, "increase", "decrease"))
plot(Lytic_latent_DE_LANA_bound_2kb$logFC, Lytic_latent_DE_LANA_bound_2kb$Fold)
Lytic_latent_LANA
plot(Lytic_latent_DE_LANA_bound_2kb$Fold, Lytic_latent_DE_LANA_bound_2kb$logFC)
Lytic_latent_LANA
plot(Lytic_latent_DE_LANA_bound_2kb$Conc, Lytic_latent_DE_LANA_bound_2kb$logFC)
cor(Lytic_latent_DE_LANA_bound_2kb$Fold, Lytic_latent_DE_LANA_bound_2kb$logFC)
cor(Lytic_latent_DE_LANA_bound$Fold, Lytic_latent_DE_LANA_bound$logFC)
plot(Lytic_latent_DE_LANA_bound$Fold, Lytic_latent_DE_LANA_bound$logFC)
Lytic_LANA_lost
mean(Lytic_LANA_gain$distanceToTSS)
mean(Lytic_LANA_lost$distanceToTSS)
mean(abs(Lytic_LANA_gain$distanceToTSS))
mean(abs(Lytic_LANA_lost$distanceToTSS))
Lytic_LANA_lost
sum(BAHCC1 %in% Lytic_latent_DE$symbol)
sum("BAHCC1" %in% Lytic_latent_DE$symbol)
sum("BAHCC1" %in% Lytic_latent_LANA$symbol)
Lytic_latent_DE[Lytic_latent_DE$symbol == "BAHCC1",]
Lytic_latent_DE[Lytic_latent_DE$symbol %in% "BAHCC1",]
BiocManager::install("infercnv")
library(infercnv)
BiocManager::install("infercnv")
library(infercnv)
library("devtools")
devtools::install_github("broadinstitute/infercnv")
install.packages("rjags")
devtools::install_github("broadinstitute/infercnv")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_github("broadinstitute/infercnv")
library(infercnv)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/xiangye/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/xiangye/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/xiangye/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/xiangye/homebrew/opt/jags/lib'")
library(infercnv)
install.packages("rjags")
BiocManager::install("infercnv")
library(infercnv)
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file("extdata", "oligodendroglioma_expression_downsampled.counts.matrix.gz", package = "infercnv"),
annotations_file=system.file("extdata", "oligodendroglioma_annotations_downsampled.txt", package = "infercnv"),
delim="\t",
gene_order_file=system.file("extdata", "gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt", package = "infercnv"),
ref_group_names=c("Microglia/Macrophage","Oligodendrocytes (non-malignant)"))
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=tempfile(),
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
infercnv_obj
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=test_infercnv,
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=test_infercnv,
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
temp_file()
tempfile()
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir="test_infercnv",
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file("extdata", "oligodendroglioma_expression_downsampled.counts.matrix.gz", package = "infercnv"),
annotations_file=system.file("extdata", "oligodendroglioma_annotations_downsampled.txt", package = "infercnv"),
delim="\t",
gene_order_file=system.file("extdata", "gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt", package = "infercnv"),
ref_group_names=c("Microglia/Macrophage","Oligodendrocytes (non-malignant)"))
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir="test_infercnv",
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=tempfile(),
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
tempfile()
?run
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file("extdata", "oligodendroglioma_expression_downsampled.counts.matrix.gz", package = "infercnv"),
annotations_file=system.file("extdata", "oligodendroglioma_annotations_downsampled.txt", package = "infercnv"),
delim="\t",
gene_order_file=system.file("extdata", "gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt", package = "infercnv"),
ref_group_names=c("Microglia/Macrophage","Oligodendrocytes (non-malignant)"))
infercnv_obj = infercnv::run(infercnv_obj,
cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
out_dir=".",
cluster_by_groups=TRUE,
denoise=TRUE,
HMM=TRUE)
install.packages("remotes")
remotes::install_github('MD-Anderson-Bioinformatics/NGCHMDemoData', ref='main')
ngchm(infercnv_obj          = infercnv_obj,
out_dir              = ".",
path_to_shaidyMapGen = "ShaidyMapGen.jar")
library(NGCHM)
devtools::install_github("MD-Anderson-Bioinformatics/tsvio")
devtools::install_github("MD-Anderson-Bioinformatics/NGCHM-R", ref="stable")
library(NGCHM)
ngchm(infercnv_obj          = infercnv_obj,
out_dir              = ".",
path_to_shaidyMapGen = "ShaidyMapGen.jar")
?NGCHM
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file("extdata", "oligodendroglioma_expression_downsampled.counts.matrix.gz", package = "infercnv"),
annotations_file=system.file("extdata", "oligodendroglioma_annotations_downsampled.txt", package = "infercnv"),
delim="\t",
gene_order_file=system.file("extdata", "gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt", package = "infercnv"),
ref_group_names=c("Microglia/Macrophage","Oligodendrocytes (non-malignant)"))
ngchm(infercnv_obj          = infercnv_obj,
out_dir              = ".",
path_to_shaidyMapGen = "ShaidyMapGen.jar")
devtools::install_github("broadinstitute/infercnvNGCHM")
ngchm(infercnv_obj          = infercnv_obj,
out_dir              = ".",
path_to_shaidyMapGen = "ShaidyMapGen.jar")
# run test dataset ----------------------------------------------
infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file("extdata", "oligodendroglioma_expression_downsampled.counts.matrix.gz", package = "infercnv"),
annotations_file=system.file("extdata", "oligodendroglioma_annotations_downsampled.txt", package = "infercnv"),
delim="\t",
gene_order_file=system.file("extdata", "gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt", package = "infercnv"),
ref_group_names=c("Microglia/Macrophage","Oligodendrocytes (non-malignant)"))
library(NGCHM)
ngchm(infercnv_obj          = infercnv_obj,
out_dir              = ".",
path_to_shaidyMapGen = "./ShaidyMapGen.jar",
gene_symbol          = "bio.gene.hugo")
library(Seurat)
knitr::opts_chunk$set(echo = TRUE)
step1 <- function(){
require(Seurat)
require(dplyr)
require(readr)
require(clusterProfiler)
require(msigdbr)
require(tibble)
}
step1()
step2_recluster_immunecells <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
UMAPPlot(rcc, group.by = "mannual_celltype")
rcc_immune <- subset(rcc, mannual_celltype %in% c("myeloid_cells", "lymphoid_cells"))
rcc_immune <- ScaleData(rcc_immune, verbose = FALSE)
rcc_immune <- RunPCA(rcc_immune, npcs = 50, verbose = FALSE)
#rcc_immune <- JackStraw(rcc_immune, num.replicate = 100)
#rcc_immune <- ScoreJackStraw(rcc_immune, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_immune, dims = 1:20)
#ElbowPlot(rcc_immune)
rcc_immune <- RunUMAP(rcc_immune, reduction = "pca", dims = 1:30, n.neighbors = 30)
#rcc_immune <- RunTSNE(rcc_immune, dims = 1:30)
#saveRDS(rcc_immune, file = "rcc_immunecells_only.rds")
rcc_immune <- FindNeighbors(rcc_immune, dims = 1:30)
rcc_immune <- FindClusters(rcc_immune, resolution = 0.5)
saveRDS(rcc_immune, file = "rcc_immunecells_only.rds")
}
step3_lympoid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_lym <- subset(rcc, mannual_celltype %in% c("lymphoid_cells"))
rcc_lym<- ScaleData(rcc_lym, verbose = FALSE)
rcc_lym <- RunPCA(rcc_lym, npcs = 50, verbose = FALSE)
rcc_lym <- JackStraw(rcc_lym, num.replicate = 100)
rcc_lym <- ScoreJackStraw(rcc_lym, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_lym, dims = 1:20)
#ElbowPlot(rcc_lym)
rcc_lym <- RunUMAP(rcc_lym, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_lym <- FindNeighbors(rcc_lym, dims = 1:30)
rcc_lym <- FindClusters(rcc_lym, resolution = 0.5)
DimPlot(rcc_lym)
markers <- FindAllMarkers(rcc_lym, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_lymphoid.csv")
saveRDS(rcc_lym, file = "rcc_lymphoid_only.rds")
}
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
DimPlot(rcc_myeloid)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
step3_lympoid_ana()
DimPlot(rcc_lym)
knitr::opts_chunk$set(echo = TRUE)
step1 <- function(){
require(Seurat)
require(dplyr)
require(readr)
require(clusterProfiler)
require(msigdbr)
require(tibble)
}
step1()
step2_recluster_immunecells <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
UMAPPlot(rcc, group.by = "mannual_celltype")
rcc_immune <- subset(rcc, mannual_celltype %in% c("myeloid_cells", "lymphoid_cells"))
rcc_immune <- ScaleData(rcc_immune, verbose = FALSE)
rcc_immune <- RunPCA(rcc_immune, npcs = 50, verbose = FALSE)
#rcc_immune <- JackStraw(rcc_immune, num.replicate = 100)
#rcc_immune <- ScoreJackStraw(rcc_immune, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_immune, dims = 1:20)
#ElbowPlot(rcc_immune)
rcc_immune <- RunUMAP(rcc_immune, reduction = "pca", dims = 1:30, n.neighbors = 30)
#rcc_immune <- RunTSNE(rcc_immune, dims = 1:30)
#saveRDS(rcc_immune, file = "rcc_immunecells_only.rds")
rcc_immune <- FindNeighbors(rcc_immune, dims = 1:30)
rcc_immune <- FindClusters(rcc_immune, resolution = 0.5)
saveRDS(rcc_immune, file = "rcc_immunecells_only.rds")
}
step3_lympoid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_lym <- subset(rcc, mannual_celltype %in% c("lymphoid_cells"))
rcc_lym<- ScaleData(rcc_lym, verbose = FALSE)
rcc_lym <- RunPCA(rcc_lym, npcs = 50, verbose = FALSE)
rcc_lym <- JackStraw(rcc_lym, num.replicate = 100)
rcc_lym <- ScoreJackStraw(rcc_lym, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_lym, dims = 1:20)
#ElbowPlot(rcc_lym)
rcc_lym <- RunUMAP(rcc_lym, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_lym <- FindNeighbors(rcc_lym, dims = 1:30)
rcc_lym <- FindClusters(rcc_lym, resolution = 0.5)
markers <- FindAllMarkers(rcc_lym, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_lymphoid.csv")
return(rcc_lym)
saveRDS(rcc_lym, file = "rcc_lymphoid_only.rds")
}
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
DimPlot(rcc_myeloid)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
step3_lympoid_ana()
rcc_lym <- step3_lympoid_ana()
DimPlot(rcc_lym)
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
DimPlot(rcc_myeloid)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
return(rcc_myeloid)
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
rcc_myeloid <- step4_myeloid_ana()
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:30, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
return(rcc_myeloid)
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
rcc_myeloid <- step4_myeloid_ana()
# myeloid only ----------------------------------------------------------------
step4_myeloid_ana <- function(seurat_obj = "rcc_seurat_singler.rds"){
rcc <- readRDS(seurat_obj)
rcc@meta.data$samples <- paste0("S", sapply(rownames(rcc@meta.data), function(x){strsplit(x, "-")}[[1]][2]))
UMAPPlot(rcc, group.by = "labels")
meta <- rcc@meta.data
meta$mannual_celltype <- meta$seurat_clusters
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(1,2,3,7),
to = c("epithelial","epithelial","epithelial","epithelial"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(0,5,6,12),
to = c("myeloid_cells","myeloid_cells","myeloid_cells","myeloid_cells"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(8),
to = c("endothelium"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(10),
to = c("fibroblasts"))
meta$mannual_celltype <- plyr::mapvalues(meta$mannual_celltype, from = c(4, 9, 11),
to = c("lymphoid_cells","lymphoid_cells","lymphoid_cells"))
rcc@meta.data <- meta
rcc_myeloid <- subset(rcc, mannual_celltype %in% c("myeloid_cells"))
rcc_myeloid<- ScaleData(rcc_myeloid, verbose = FALSE)
rcc_myeloid <- RunPCA(rcc_myeloid, npcs = 50, verbose = FALSE)
rcc_myeloid <- JackStraw(rcc_myeloid, num.replicate = 100)
rcc_myeloid <- ScoreJackStraw(rcc_myeloid, dims = 1:20, do.plot = TRUE)
#JackStrawPlot(rcc_myeloid, dims = 1:20)
#ElbowPlot(rcc_myeloid)
rcc_myeloid <- RunUMAP(rcc_myeloid, reduction = "pca", dims = 1:30, n.neighbors = 30)
rcc_myeloid <- FindNeighbors(rcc_myeloid, dims = 1:30)
rcc_myeloid <- FindClusters(rcc_myeloid, resolution = 0.5)
markers <- FindAllMarkers(rcc_myeloid, only.pos = TRUE)
markers %>% data.frame() %>% rownames_to_column() %>% write_csv("allmarkers_myeloid.csv")
return(rcc_myeloid)
saveRDS(rcc_myeloid, file = "rcc_myeloid_only.rds")
}
rcc_myeloid <- step4_myeloid_ana()
?plot
plot(x = 1:10000, y = 1:10000)
plot(x = 1:10000, y = 1:10000, color = "red")
plot(x = 1:10000, y = 1:10000, col = "red")
barplot(height = c(467, 30))
barplot(height = c(467, 30), ylim = c(0, 600))
barplot(height = c(467, 30), ylim = c(0, 600), width = 3)
barplot(height = c(467, 30), ylim = c(0, 600), width = 5)
dev.off()
barplot(height = c(467, 30), ylim = c(0, 600), width = 5)
dev.off()
barplot(height = c(467, 30), ylim = c(0, 600), width = 15)
library(tidyverse)
barplot(height = c(96, 28), ylim = c(0, 600), width = 15)
barplot(height = c(96, 28), ylim = c(0, 120), width = 15)
setwd("~/Dropbox/RNAseqAna")
